// controllers/AuthController.js
// const firebaseClient = require("firebase/app");
// const { getAuth: getClientAuth, signInWithEmailAndPassword, sendEmailVerification } = require("firebase/auth");
// const { db, auth: adminAuth } = require("../firebase/admin");

// const firebaseConfig = {
//   apiKey: process.env.FIREBASE_API_KEY,
//   authDomain: process.env.FIREBASE_AUTH_DOMAIN,
// };

// exports.login = async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const clientApp = firebaseClient.initializeApp(firebaseConfig, `login-${Date.now()}`);
//     const clientAuth = getClientAuth(clientApp);
//     const userCredential = await signInWithEmailAndPassword(clientAuth, email, password);
//     const user = userCredential.user;

//     if (!user.emailVerified) return res.status(401).json({ message: "Email not verified" });

//     const idToken = await user.getIdToken();
//     const decodedToken = await adminAuth.verifyIdToken(idToken);
//     const uid = decodedToken.uid;
//     const docSnap = await db.collection("users").doc(uid).get();
//     if (!docSnap.exists) return res.status(404).json({ message: "User not found" });

//     const { role } = docSnap.data();
//     return res.status(200).json({ idToken, uid, email: user.email, role });

//   } catch (err) {
//     console.error("Login failed:", err.message);
//     return res.status(401).json({ message: "Invalid email or password" });
//   }
// };
// exports.login = async (req, res) => {
//   console.log("üì• Login route hit. Email:", req.body.email);
//   return res.status(200).json({ message: "Dummy login success", user: req.body.email });
// };

// // exports.login = async (req, res) => {
// //   const { email, password } = req.body;
// //   try {
// //     console.log("üì• Login attempt for:", email); // <--- Add this
// //     const clientApp = firebaseClient.initializeApp(firebaseConfig, `login-${Date.now()}`);
// //     const clientAuth = getClientAuth(clientApp);
// //     const userCredential = await signInWithEmailAndPassword(clientAuth, email, password);
// //     const user = userCredential.user;

// //     if (!user.emailVerified) return res.status(401).json({ message: "Email not verified" });

// //     const idToken = await user.getIdToken();
// //     const decodedToken = await adminAuth.verifyIdToken(idToken);
// //     const uid = decodedToken.uid;
// //     const docSnap = await db.collection("users").doc(uid).get();
// //     if (!docSnap.exists) return res.status(404).json({ message: "User not found" });

// //     const { role } = docSnap.data();
// //     return res.status(200).json({ idToken, uid, email: user.email, role });

// //   } catch (err) {
// //     console.error("‚ùå Login failed:", err); // <--- Already present, make sure it's logging full error
// //     console.error("Message:", err.message);
// //   console.error("Code:", err.code); // Firebase has a code field
// //   console.error("Full error:", err);
// //     return res.status(401).json({ message: "Invalid email or password" });
// //   }
// // };



// exports.signup = async (req, res) => {
//   const { firstName, lastName, email, password, role } = req.body;
//   try {
//     const userRecord = await adminAuth.createUser({ email, password });
//     const uid = userRecord.uid;
//     await db.collection("users").doc(uid).set({ firstName, lastName, email, role, createdAt: new Date().toISOString() });

//     const clientApp = firebaseClient.initializeApp(firebaseConfig, `signup-${Date.now()}`);
//     const clientAuth = getClientAuth(clientApp);
//     const userCredential = await signInWithEmailAndPassword(clientAuth, email, password);
//     await sendEmailVerification(userCredential.user);

//     return res.status(201).json({ message: "User created. Verification email sent." });

//   } catch (err) {
//     console.error("Signup failed:", err.message);
//     return res.status(400).json({ message: err.message });
//   }
// };

// controllers/AuthController.js
exports.login = async (req, res) => {
  const { email, password } = req.body;
  try {
    console.log("üì• Login attempt for:", email);
    const clientApp = firebaseClient.initializeApp(firebaseConfig, `login-${Date.now()}`);
    const clientAuth = getClientAuth(clientApp);
    const userCredential = await signInWithEmailAndPassword(clientAuth, email, password);
    const user = userCredential.user;

    if (!user.emailVerified) return res.status(401).json({ message: "Email not verified" });

    const idToken = await user.getIdToken();
    const decodedToken = await adminAuth.verifyIdToken(idToken);
    const uid = decodedToken.uid;

    const docSnap = await db.collection("users").doc(uid).get();
    if (!docSnap.exists) return res.status(404).json({ message: "User not found" });

    const { role } = docSnap.data();
    return res.status(200).json({ idToken, uid, email: user.email, role });

  } catch (err) {
    console.error("‚ùå Login failed:");
    console.error("Message:", err.message);
    console.error("Code:", err.code);
    console.error("Full error:", err);
    return res.status(401).json({ message: "Invalid email or password" });
  }
};
