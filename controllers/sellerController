// const { getFirestore, collection, addDoc, getDocs, query, where, doc, updateDoc, deleteDoc } = require("firebase/firestore");
// const { initializeApp } = require("firebase/app");

// const firebaseConfig = {
//   apiKey: process.env.FIREBASE_API_KEY,
//   authDomain: process.env.FIREBASE_AUTH_DOMAIN,
//   projectId: process.env.FIREBASE_PROJECT_ID,
// };

// const app = initializeApp(firebaseConfig);
// const db = getFirestore(app);

// exports.getSellerProducts = async (req, res) => {
//   const { email } = req.query;
//   try {
//     const q = query(collection(db, "products"), where("email", "==", email));
//     const snapshot = await getDocs(q);
//     const products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
//     res.json(products);
//   } catch (err) {
//     console.error("Error fetching products:", err);
//     res.status(500).json({ message: "Error fetching products" });
//   }
// };

// exports.addProduct = async (req, res) => {
//   const { name, price, description, image, category, email, stock = 1 } = req.body;
//   try {
//     const docRef = await addDoc(collection(db, "products"), {
//       name, price, description, image, category, email, stock
//     });
//     res.status(201).json({ message: "Product added", id: docRef.id });
//   } catch (err) {
//     console.error("Error adding product:", err);
//     res.status(500).json({ message: "Error adding product" });
//   }
// };

// exports.updateStock = async (req, res) => {
//   try {
//     const productRef = doc(db, "products", req.params.id);
//     await updateDoc(productRef, { stock: req.body.stock });
//     res.json({ message: "Stock updated" });
//   } catch (err) {
//     console.error("Error updating stock:", err);
//     res.status(500).json({ message: "Error updating stock" });
//   }
// };

// exports.deleteProduct = async (req, res) => {
//   try {
//     await deleteDoc(doc(db, "products", req.params.id));
//     res.json({ message: "Product deleted" });
//   } catch (err) {
//     console.error("Error deleting product:", err);
//     res.status(500).json({ message: "Error deleting product" });
//   }
// };
const { db } = require('../firebase/admin'); // adjust path if needed

// Get products for a seller by email
exports.getSellerProducts = async (req, res) => {
  try {
    const { email } = req.query;
    const snapshot = await db.collection('products').where('email', '==', email).get();

    if (snapshot.empty) {
      return res.json([]);
    }

    const products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    res.json(products);
  } catch (err) {
    console.error("ðŸ”¥ Error fetching products:", err);
    res.status(500).json({ message: "Failed to fetch seller products" });
  }
};

// Add new product
exports.addProduct = async (req, res) => {
  try {
    const { name, price, description, image, category, email, stock = 1 } = req.body;

    const newProduct = {
      name,
      price,
      description,
      image,
      category,
      email,
      stock,
      createdAt: new Date()
    };

    const docRef = await db.collection('products').add(newProduct);
    res.status(201).json({ message: 'Product added', product: { id: docRef.id, ...newProduct } });
  } catch (err) {
    console.error("ðŸ”¥ Error adding product:", err);
    res.status(500).json({ message: "Failed to add product" });
  }
};

// Update stock for a product
exports.updateStock = async (req, res) => {
  try {
    const { stock } = req.body;
    const productId = req.params.id;

    await db.collection('products').doc(productId).update({ stock });
    res.json({ message: 'Stock updated' });
  } catch (err) {
    console.error("ðŸ”¥ Error updating stock:", err);
    res.status(500).json({ message: "Failed to update stock" });
  }
};

// Delete a product
exports.deleteProduct = async (req, res) => {
  try {
    const productId = req.params.id;

    await db.collection('products').doc(productId).delete();
    res.json({ message: 'Product deleted' });
  } catch (err) {
    console.error("ðŸ”¥ Error deleting product:", err);
    res.status(500).json({ message: "Failed to delete product" });
  }
};
